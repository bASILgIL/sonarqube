name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # Extract the sonar-application ZIP file
    - name: Extract sonar-application ZIP
      run: |
        unzip ./sonar-application/build/distributions/sonar-application-25.2-SNAPSHOT.zip -d ./sonar-application/build/distributions/

    # Start Sonar
    - name: Start Sonar
      run: |
        cd ./sonar-application/build/distributions/sonarqube-25.2-SNAPSHOT/bin/linux-x86-64
        ./sonar.sh start

    - name: Restart SonarQube and Measure Average Reboot Time
  run: |
    cd ./sonar-application/build/distributions/sonarqube-25.2-SNAPSHOT/bin/linux-x86-64

    TOTAL_TIME=0
    ITERATIONS=10
    TIMEOUT=120  # 2 minutes timeout

    for i in $(seq 1 $ITERATIONS); do
      echo "Iteration $i: Stopping SonarQube..."
      ./sonar.sh stop
      sleep 5  # Ensure shutdown completes

      echo "Iteration $i: Restarting SonarQube..."
      START_TIME=$(date +%s)
      ./sonar.sh start

      echo "Waiting for SonarQube to be up..."
      while [[ $(( $(date +%s) - START_TIME )) -lt $TIMEOUT ]]; do
        STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r '.status')
        if [[ "$STATUS" == "UP" ]]; then
          REBOOT_TIME=$(( $(date +%s) - START_TIME ))
          TOTAL_TIME=$((TOTAL_TIME + REBOOT_TIME))
          echo "Iteration $i: SonarQube restarted in $REBOOT_TIME seconds."
          break
        fi
        sleep 5
      done

      if [[ $(( $(date +%s) - START_TIME )) -ge $TIMEOUT ]]; then
        echo "ERROR: SonarQube did not restart within 2 minutes on iteration $i."
        exit 1
      fi
    done

    AVERAGE_TIME=$((TOTAL_TIME / ITERATIONS))
    echo "SonarQube's average reboot time over $ITERATIONS iterations: $AVERAGE_TIME seconds."

    if [[ $AVERAGE_TIME -le 120 ]]; then
      echo "The average reboot time meets the requirement (< 2 minutes)."
    else
      echo "The average reboot time exceeds 2 minutes."
      exit 1
    fi
