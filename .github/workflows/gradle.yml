name: Java CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

    - name: Build with Gradle Wrapper
      run: ./gradlew build

    # Extract the sonar-application ZIP file
    - name: Extract sonar-application ZIP
      run: |
        unzip ./sonar-application/build/distributions/sonar-application-25.2-SNAPSHOT.zip -d ./sonar-application/build/distributions/

    # Start Sonar
    - name: Start Sonar
      run: |
        cd ./sonar-application/build/distributions/sonarqube-25.2-SNAPSHOT/bin/linux-x86-64
        ./sonar.sh start

    - name: Restart SonarQube and Check Reboot Time
      run: |
        cd ./sonar-application/build/distributions/sonarqube-25.2-SNAPSHOT/bin/linux-x86-64

        echo "Stopping SonarQube..."
        ./sonar.sh stop
        sleep 5  # Ensure shutdown completes

        echo "Restarting SonarQube..."
        START_TIME=$(date +%s)
        ./sonar.sh start

        echo "Waiting for SonarQube to be up..."
        TIMEOUT=120  # 2 minutes timeout
        while [[ $(( $(date +%s) - START_TIME )) -lt $TIMEOUT ]]; do
          STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r '.status')
          if [[ "$STATUS" == "UP" ]]; then
            echo "SonarQube restarted successfully in $(( $(date +%s) - START_TIME )) seconds."
            exit 0
          fi
          sleep 5
        done

        echo "ERROR: SonarQube did not restart within 2 minutes!"
        exit 1
